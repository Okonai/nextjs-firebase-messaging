self.onmessage=async a=>{switch(a.data.type){case"__START_URL_CACHE__":{let e=a.data.url,f=await fetch(e);if(!f.redirected)return(await caches.open("start-url")).put(e,f);return Promise.resolve()}case"__FRONTEND_NAV_CACHE__":{let c=a.data.url,g=await caches.open("pages");if(await g.match(c,{ignoreSearch:!0}))return;let b=await fetch(c);if(!b.ok)return;if(g.put(c,b.clone()),a.data.shouldCacheAggressively&&b.headers.get("Content-Type")?.includes("text/html"))try{let h=await b.text(),d=[],j=await caches.open("static-style-assets"),k=await caches.open("next-static-js-assets"),l=await caches.open("static-js-assets");for(let[m,n]of h.matchAll(/<link.*?href=['"](.*?)['"].*?>/g))/rel=['"]stylesheet['"]/.test(m)&&d.push(j.match(n).then(a=>a?Promise.resolve():j.add(n)));for(let[,i]of h.matchAll(/<script.*?src=['"](.*?)['"].*?>/g)){let o=/\/_next\/static.+\.js$/i.test(i)?k:l;d.push(o.match(i).then(a=>a?Promise.resolve():o.add(i)))}return await Promise.all(d)}catch{}return Promise.resolve()}default:return Promise.resolve()}}